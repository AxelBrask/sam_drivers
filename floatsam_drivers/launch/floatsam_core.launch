<launch>

  <arg name="debug" default="0"/>
  <arg name="mode" default="default"/>
  <arg name="namespace" default="floatsam"/>

  <arg name="gps_port" value="/dev/ttyACM1"/>
  <arg name="gps_baud" value="38400"/>

  <arg name="with_gps" default="true"/>
  <arg name="uav_can_interface" default="can0"/>

  <!-- <param name="utm_zone" type="int" value="$(arg utm_zone)"/>
  <param name="utm_band" type="string" value="$(arg utm_band)"/>  -->

  <arg name="param_file_name"     doc="name of param file, e.g. rover" 
                                  default="zed_f9p"/>
  <arg name="param_file_dir"      doc="directory to look for $(arg param_file_name).yaml"
                                  default="$(find ublox_gps)/config" />

  <group ns="$(arg namespace)">

    <param name="robot_description"
           command="$(find xacro)/xacro '$(find floatsam_description)/robots/floatsam_usv_$(arg mode).urdf.xacro' debug:=$(arg debug) namespace:=$(arg namespace)" />

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" respawn="true" output="screen">
      <param name="use_gui" value="false"/>
      <rosparam param="source_list">["/floatsam/command_states"]</rosparam>
    </node>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
      <param name="robot_description" value="/$(arg namespace)/robot_description" />
    </node>

    <!-- SBG IMU driver -->
    <node name="sbg_ellipseA" pkg="sbg_driver" type="sbg_device" output="screen">
      <rosparam command="load" file="$(find sbg_driver)/config/ellipse_A_sam.yaml" />
    </node>
    
    <node pkg="sbg_driver" name="sbg_2_ros" type="sbg_to_ros.py" output="screen">
		  <param name="sbg_imu_data" value="/$(arg namespace)/sbg/imu_data"/>
		  <param name="sbg_ekf_quat" value="/$(arg namespace)/sbg/ekf_quat"/>
		  <param name="sbg_mag" value="/$(arg namespace)/sbg/mag"/>
		  <param name="sbg_utc_time" value="/$(arg namespace)/sbg/utc_time"/>
		  <param name="sbg_frame" value="$(arg namespace)/sbg_link"/>
		  <param name="sbg_imu_out" value="/$(arg namespace)/core/sbg_imu"/>
	  </node>

    <arg name="node_start_delay" default="2.0" />  
    <!-- STIM300 IMU driver -->
    <node name="stim300driver" output="screen" pkg="driver_stim300" type="stim300_driver_node" ns="core" launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@'">
    	<param name = "device_path" value="/dev/ttyUSB1" type="string" />
    	<param name = "variance_gyro" value="0.0004" type="double" />
    	<param name = "variance_acc" value="0.004" type="double" />
    	<param name = "imu_output" value="/$(arg namespace)/core/imu" type="string"/>
    	<param name = "imu_frame" value="$(arg namespace)/imu_link" type="string"/>
    	<param name = "sample_rate" value="125" type="double" />
    </node>
   
    <!-- WL DVL -->
    <!-- <node pkg="waterlinked_a50_ros_driver" type="publisher.py" name="dvl_driver" output="screen" ns="core">
      <param name="dvl_topic" value="/$(arg namespace)/core/dvl"/>
      <param name="dvl_raw_topic" value="/$(arg namespace)/core/dvl_raw_output"/>
      <param name="dvl_frame" value="$(arg namespace)/dvl_link"/>
      <param name="dvl_on_off_srv" value="/$(arg namespace)/core/toggle_dvl"/>
      <param name="ip" value="192.168.2.147"/>
    </node> -->

    <!-- Node that enables us to disable the DVL in order to get GPS fixes to update DR -->
    <!-- <node pkg="sam_actions" type="gps_fix_server.py" name="gps_fix_server" output="screen"/> -->

    <node pkg="sam_drivers" type="sam_startup_check.py" name="startup_check" output="screen">
       <remap from="~lcg_cmd" to="/$(arg namespace)/core/lcg_cmd"/>
       <remap from="~vbs_cmd" to="/$(arg namespace)/core/vbs_cmd"/>
    </node>
    <node pkg="sam_drivers" type="sam_joint_state_converter.py" name="sam_joint_state_converter" output="screen">
       <remap from="~rpm_cmd" to="/$(arg namespace)/core/rpm_cmd"/>
       <remap from="~thrust_vector_cmd" to="/$(arg namespace)/core/thrust_vector_cmd"/>
    </node>

    <!--<node pkg="nmea_navsat_driver" type="nmea_serial_driver" name="navsat" respawn="true" if="$(arg with_gps)" ns="core" launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@'">
      <param name="port" value="/dev/ttyACM0"/>
      <param name="baud" value="$(arg gps_baud)"/>
      <param name="frame_id" value="$(arg namespace)/gps_link"/>
      <remap from="fix" to="gps"/>
    </node>-->

    <node pkg="nucleus1000_driver" type="nucleus_ros_driver.py" name="nucleus1000_driver" output="screen">

      <!-- <param name="/dvl_ip" value="$(arg ip)"/>  -->
      <param name="port" value="/dev/ttyUSB2"/>

      <param name="dvl_topic" value="/$(arg namespace)/core/dvl"/>
      <param name="dvl_raw_topic" value="/$(arg namespace)/core/dvl_raw_output"/>
      <param name="dvl_frame" value="$(arg namespace)/dvl_link"/>
      <param name="dvl_on_off_srv" value="/$(arg namespace)/core/toggle_dvl"/>
    </node>

    <!--<node pkg="nmea_navsat_driver" type="nmea_serial_driver" name="navsat_prt" respawn="true" if="$(arg with_gps)" ns="core">
      <param name="port" value="/dev/ttyACM0"/>
      <param name="baud" value="$(arg gps_baud)"/>
      <param name="frame_id" value="$(arg namespace)/rtk_prt_link"/>
      <remap from="fix" to="rtk_prt"/>
    </node>-->
 
    <!--<node pkg="nmea_navsat_driver" type="nmea_serial_driver" name="navsat_stb" respawn="true" if="$(arg with_gps)" ns="core">
      <param name="port" value="/dev/ttyACM3"/>
      <param name="baud" value="$(arg gps_baud)"/>
      <param name="frame_id" value="$(arg namespace)/rtk_stb_link"/>
      <remap from="fix" to="rtk_stb"/>
    </node>-->

    <node pkg="ublox_gps" type="ublox_gps" name="navsat" ns="core">
	<arg name="param_file_name" value="zed_f9p"/>
      	<remap from="navsat/fix" to="/$(arg namespace)/core/gps"/>
      	<rosparam command="load"
              file="$(arg param_file_dir)/$(arg param_file_name).yaml" />
	  </node>

    <include file= "$(find smarc_acomms_nm3)/launch/full_acomms_stack.launch" ns="core">
      <arg name="robot_name" value="$(arg namespace)"/>
      <arg name="driver_port" value="/dev/ttyUSB2"/>
    </include>

  </group>

  <include file="$(find sam_uavcan_bridge)/launch/bridge.launch">
    <arg name="uav_can_interface" value="$(arg uav_can_interface)"/>
    <arg name="namespace" value="$(arg namespace)"/>
  </include>

  <include file="$(find message_joiner)/launch/joiner.launch">
    <arg name="namespace" value="$(arg namespace)"/>
  </include>
  
  <!-- <node pkg="flexxros" type="sam_controls.py" name="sam_controls_interface" output="screen"/> -->

</launch>
