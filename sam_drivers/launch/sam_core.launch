<launch>

  <arg name="debug" default="0"/>
  <arg name="mode" default="default"/>
  <arg name="namespace" default="sam"/>

  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <!-- TF broadcaster world to AUV odom -->
  <node pkg="tf" type="static_transform_publisher" name="$(arg namespace)_world_odom" args="$(arg x) $(arg y) $(arg z) $(arg roll) $(arg pitch) $(arg yaw) world $(arg namespace)_odom 50" />

  <group ns="$(arg namespace)">
    <param name="robot_description"
           command="$(find xacro)/xacro.py '$(find smarc_private_auvs)/models/sam_auv/robots/sam_auv_$(arg mode).urdf.xacro' debug:=$(arg debug) namespace:=$(arg namespace)" />

     <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
<!--     <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/> -->

      <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" respawn="true" output="screen">
      <param name="use_gui" value="false"/>
    </node>

    <!-- Load joint controller configurations from YAML file to parameter server -->
<!--     <rosparam file="$(find smarc_private_auvs)/models/sam_auv/config/controllers.yaml" command="load"/> -->
    <!-- load the controllers -->
<!--     <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint1_position_controller joint2_position_controller joint_state_controller"/> -->


    <!-- Publish robot model for ROS -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
      <param name="robot_description" value="/$(arg namespace)/robot_description" />
    </node>
    
  </group>

  <include file="$(find uavcan_ros_bridge)/launch/bridge.launch">
  </include>

</launch>
