<launch>

  <arg name="debug" default="0"/>
  <arg name="mode" default="default"/>
  <arg name="namespace" default="sam"/>

  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <arg name="gps_port" value="/dev/ttyUSB3"/>
  <arg name="gps_baud" value="9600"/>

  <arg name="with_gps" default="true"/>
  <arg name="uav_can_interface" default="can0"/>


  <group ns="$(arg namespace)">
    <!-- TF broadcaster world to AUV odom -->
    <node pkg="tf" type="static_transform_publisher" name="tf_world_odom_publisher" args="$(arg x) $(arg y) $(arg z) $(arg roll) $(arg pitch) $(arg yaw) world $(arg namespace)_odom 50" />

    <param name="robot_description"
           command="$(find xacro)/xacro.py '$(find sam_description)/robots/sam_auv_$(arg mode).urdf.xacro' debug:=$(arg debug) namespace:=$(arg namespace)" />

     <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
<!--     <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/> -->

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" respawn="true" output="screen">
      <param name="use_gui" value="false"/>
      <rosparam param="source_list">["/sam/command_states"]</rosparam>
    </node>

    <!-- Load joint controller configurations from YAML file to parameter server -->
<!--     <rosparam file="$(find smarc_private_auvs)/models/sam_auv/config/controllers.yaml" command="load"/> -->
    <!-- load the controllers -->
<!--     <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint1_position_controller joint2_position_controller joint_state_controller"/> -->


    <!-- Publish robot model for ROS -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
      <param name="robot_description" value="/$(arg namespace)/robot_description" />
    </node>

    <node pkg="sam_drivers" type="sam_startup_check.py" name="startup_check" output="screen">
       <remap from="~lcg_cmd" to="/$(arg namespace)/core/lcg_cmd"/>
       <remap from="~vbs_cmd" to="/$(arg namespace)/core/vbs_cmd"/>
    </node>
    <node pkg="sam_drivers" type="sam_joint_state_converter.py" name="sam_joint_state_converter" output="screen">
       <remap from="~rpm_cmd" to="/$(arg namespace)/core/rpm_cmd"/>
       <remap from="~thrust_vector_cmd" to="/$(arg namespace)/core/thrust_vector_cmd"/>
    </node>

    <!-- Node that enables us to disable the DVL in order to get GPS fixes to update DR -->
    <node pkg="sam_actions" type="gps_fix_server.py" name="gps_fix_server" output="screen"/>

    <node pkg="nmea_navsat_driver" type="nmea_serial_driver" name="navsat" respawn="true" if="$(arg with_gps)" ns="core">
      <param name="port" value="$(arg gps_port)"/>
      <param name="baud" value="$(arg gps_baud)"/>
      <param name="frame_id" value="$(arg namespace)/gps_link"/>
      <remap from="fix" to="gps"/>
    </node>
  
    <include file="$(find sam_drivers)/launch/sam_rosbag.launch">
      <arg name="save_path" value="$(arg uav_can_interface)"/>
      <arg name="bag_name" value="sam_core"/>
    </include>
    
  </group>

  <include file="$(find sam_uavcan_bridge)/launch/bridge.launch">
    <arg name="uav_can_interface" value="$(arg uav_can_interface)"/>
  </include>
  <!-- <node pkg="flexxros" type="sam_controls.py" name="sam_controls_interface" output="screen"/> -->

</launch>
